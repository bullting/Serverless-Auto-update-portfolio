*** Install Chocolatey ***

- Luanch Windows Powershell as Administrator

@ Run <Get-ExecutionPolicy>

@ Run <iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')
^This link can be found in Chocolatey website in section of Install with powershell.

After installation finished, run <choco -?> to check, if error display then try reboot windows or powershell.

*** To install git ****

@ Run <choco install git -y>

*** To install open SSH ***

@ Run <choco install openssh -y  -params "/SSHAgentFeature">

*** To install Node.js and NPM ***

@ Run <choco install nodejs npm -y>

Note: If error occurs at the end of message, then look at the message above to see if it say nodejs has installed successfully.

@ Run <npm> to check

@ Run <choco install atom -y>

@ Run <choco install python2>

choco install awscli -y
choco install unzip Less -y (To view the file in command line)

Last restart windows.

pip install boto3
pip install ipython


git config --global user.name "bullting"
git config --global user.email jakadui@gmail.com

git clone https://github.com/bullting/my-portfolio.git

atom README.md

git commit -m "First Commit - fix Readme title and Description"

git push

git add Readme.md (after change something in file)

ssh-keygen -C jakadui@gmail.com

--> open file id_rsa.pub under .ssh folder.
--> Copy and patse details to Github

ssh-add (In case of error, maybe ok to ignore)


=============================== Setup AWS ==============================

1. Setup IAM
2. Setup Route53 and DNS
3. Deploying S3
4. Setup CloudFront & SSL

============================= Automate Deployment ======================

1. Create CodeBuild Build (Get files from github and zip it and store in S3 bucket)

	1.1 Create S3 bucket for Artifact ( use "Ubutu", "Nodejs") (Give the Artifact name as XXX.ZIP) (Choose zip as Artifact package)
	1.2 After build finished, it will show error as it needs yml file)
	1.3 Check inside yml file detail in this folder.

2. AWS Client & Boto3

	2.1 Use AWS CLI to check content in S3 bucket <aws s3 ls portfolio.bullstorm.info>
	2.2

Note: Ctrl + r to search the previous command
%history to see all commands

3. AWA Lambda

what kind of job are you looking for
salary
permanent
visa
what is your strange?
Have you been worked in US

bullstorm GoUS9N!


I believed I know enough from my experience about IT such s/w dev, cloud, devop, IT infra...
I love to talk and to know people and help them to fit their need and company to get the right resource and happy with their carrer

半年ぐらいのAWSの構築・運用の経験程度ですが、興味を持っち、将来的に活用される企業も当然ですが、もっと業務を性能をよくできる。
研究して、自分で以下のようなポートフォリオを作成しました。資格をとる予定です。


import boto3
from botocore.client import Config 
import StringIO
import zipfile

def lambda_handler(event, context):
    
    sns = boto3.resource('sns')
    topic = sns.Topic('arn:aws:sns:ap-northeast-1:309392962896:deployPortfolioTopic')
    
    location ={
        "bucketName": 'portfoliobuild.bullstorm.info'
    }
    
    try:
        job = event.get("CodePipeline.job")
        
        if job:
            for artifact in job["data"]["inpuartifacts"]:
                if artifact["name"] == "MyAppBuild":
                    location = artifact["location"]["s3location"]
        
        print "Builing Portfolio from " + str(location)
        
        s3 = boto3.resource('s3', config=Config(signature_version='s3v4'))
   
        portfolio_bucket = s3.Bucket('portfolio.bullstorm.info')
        build_bucket = s3.Bucket('portfoliobuild.bullstorm.inf')
        
        portfolio_zip = StringIO.StringIO()
        build_bucket.download_fileobj('portfoliobuild.zip', portfolio_zip)
        
        with zipfile.ZipFile(portfolio_zip) as myzip:
            for nm in myzip.namelist():
                obj = myzip.open(nm)
                portfolio_bucket.upload_fileobj(obj, nm)
                portfolio_bucket.Object(nm).Acl().put(ACL='public-read')
    
        print ("Job Done !")
        topic.publish(Subject="Deploy Portfolio", Message="Deployed successfully.")
        
        if job:
            codepipeline = boto3.client('codepipeline')
            codepipeline.put_job_successfully_result(JobId=job['id'])
            
    
    except:
        topic.publish(Subject="Deploy Failed", Message="Portfolio Deploy Unsuccessfully!!")
        raise
    
    
    return 'Hello from Lambda'


import boto3
s3 = boto3.resource('s3')
pf_bk = s3.Bucket('portfolio.bullstorm.info')
for obj in pf_bk.objects.all():
    print(obj.key)
pf_bk.download_file('index.html','/downloads/indextest.html')
pf_bk.download_file('index.html','c:/Users/キティポン/downloads/indextest.html')
build_bk = s3.Bucket('portfoliobuild.bullstorm.info')
build_bk.download_file('main.css','c:/Users/キティポン/Downloads/main.css')
%history

(bullting) C:\code\my-portfolio>aws sns publish --topic-arn arn:aws:sns:ap-northeast-1:309392962896:deployPortfolioTopic --subject "Test message" --message "This is only testing"
{
    "MessageId": "80bd322f-f210-5ce9-a127-608a9f3cabbd"
}

********* New code in Lambda：

import boto3
from botocore.client import Config
import StringIO
import zipfile

def lambda_handler(event, context):

    sns = boto3.resource('sns')
    topic = sns.Topic('arn:aws:sns:ap-northeast-1:309392962896:deployPortfolioTopic')
    
    location {
        "bucketName": 'portfoliobuild.bullstorm.info',
        "objectkey": 'portfoliobuild.zip'
        
    }

    try:
        job = event.get("CodePipeline.job")
        
        if job:
            for artifact in job["data"]["inputArtifacts"]:
                if artifact["name"] == "MyAppBuild":
                    location = artifact["location"]["s3location"]
                    
        print "Building Portfolio from" + str(location)
                    
        s3 = boto3.resource('s3', config=Config(signature_version='s3v4'))

        portfolio_bucket = s3.Bucket('portfolio.bullstorm.info')
        build_bucket = s3.Bucket(location(["bucketName"])

        portfolio_zip = StringIO.StringIO()
        build_bucket.download_fileobj('location["objectkey"], portfolio_zip)

        with zipfile.ZipFile(portfolio_zip) as myzip:
            for nm in myzip.namelist():
                obj = myzip.open(nm)
                portfolio_bucket.upload_fileobj(obj, nm)
                portfolio_bucket.Object(nm).Acl().put(ACL='public-read')

        print ("Job Done !")
        topic.publish(Subject="Deploy Portfolio", Message="Deployed successfully.")
        
        if job:
            codepipeline = boto3.client('codepipeline')
            codepipeline.put_job_success=result(jobId=job["id"])
    except:
        topic.publish(Subject="Deploy Failed", Message="Portfolio Deploy Unsuccessfully!!")
        raise

    return 'Hello from Lambda'


